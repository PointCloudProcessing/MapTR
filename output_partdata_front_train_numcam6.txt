projects.mmdet3d_plugin
2023-10-17 21:19:58,408 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]
CUDA available: True
GPU 0,1: Tesla T4
CUDA_HOME: /usr/local/cuda-11.1
NVCC: Build cuda_11.1.TC455_06.29190527_0
GCC: gcc (GCC) 6.1.0
PyTorch: 1.9.1+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.10.1+cu111
OpenCV: 4.8.1
MMCV: 1.4.0
MMCV Compiler: GCC 6.1
MMCV CUDA Compiler: 11.1
MMDetection: 2.14.0
MMSegmentation: 0.14.1
MMDetection3D: 0.17.2+fb001bc
------------------------------------------------------------

2023-10-17 21:19:59,793 - mmdet - INFO - Distributed training: True
2023-10-17 21:20:01,162 - mmdet - INFO - Config:
--- <unknown>	(original)
+++ <unknown>	(reformatted)
@@ -1,150 +1,196 @@
-point_cloud_range=[-15.0, -0.0, -2.0, 15.0, 30.0, 2.0]
-class_names=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']
-dataset_type='CustomNuScenesLocalMapDataset'
-data_root='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/'
-input_modality=dict(
+point_cloud_range = [-15.0, -0.0, -2.0, 15.0, 30.0, 2.0]
+class_names = [
+    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
+    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
+]
+dataset_type = 'CustomNuScenesLocalMapDataset'
+data_root = '/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/'
+input_modality = dict(
     use_lidar=True,
     use_camera=True,
     use_radar=False,
     use_map=False,
     use_external=True)
-file_client_args=dict(
-    backend='disk')
-train_pipeline=[
-    dict(type='LoadMultiViewImageFromFiles',
-        to_float32=True),
-    dict(type='CustomLoadPointsFromFile',
+file_client_args = dict(backend='disk')
+train_pipeline = [
+    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
+    dict(
+        type='CustomLoadPointsFromFile',
         coord_type='LIDAR',
         load_dim=5,
         use_dim=5,
         reduce_beams=32),
-    dict(type='CustomLoadPointsFromMultiSweeps',
+    dict(
+        type='CustomLoadPointsFromMultiSweeps',
         sweeps_num=9,
         load_dim=5,
         use_dim=5,
         reduce_beams=32,
         pad_empty_sweeps=True,
         remove_close=True),
-    dict(type='CustomPointsRangeFilter',
+    dict(
+        type='CustomPointsRangeFilter',
         point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]),
     dict(type='PhotoMetricDistortionMultiViewImage'),
-    dict(type='LoadAnnotations3D',
+    dict(
+        type='LoadAnnotations3D',
         with_bbox_3d=True,
         with_label_3d=True,
         with_attr_label=False),
-    dict(type='ObjectRangeFilter',
+    dict(
+        type='ObjectRangeFilter',
         point_cloud_range=[-15.0, -0.0, -2.0, 15.0, 30.0, 2.0]),
-    dict(type='ObjectNameFilter',
-        classes=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']),
-    dict(type='NormalizeMultiviewImage',
+    dict(
+        type='ObjectNameFilter',
+        classes=[
+            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
+        ]),
+    dict(
+        type='NormalizeMultiviewImage',
         mean=[123.675, 116.28, 103.53],
         std=[58.395, 57.12, 57.375],
         to_rgb=True),
-    dict(type='RandomScaleImageMultiViewImage',
-        scales=[0.5]),
-    dict(type='PadMultiViewImage',
-        size_divisor=32),
-    dict(type='DefaultFormatBundle3D',
-        class_names=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']),
-    dict(type='CustomCollect3D',
-        keys=['gt_bboxes_3d', 'gt_labels_3d', 'img', 'points'])]
-test_pipeline=[
-    dict(type='LoadMultiViewImageFromFiles',
-        to_float32=True),
-    dict(type='NormalizeMultiviewImage',
+    dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),
+    dict(type='PadMultiViewImage', size_divisor=32),
+    dict(
+        type='DefaultFormatBundle3D',
+        class_names=[
+            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
+        ]),
+    dict(
+        type='CustomCollect3D',
+        keys=['gt_bboxes_3d', 'gt_labels_3d', 'img', 'points'])
+]
+test_pipeline = [
+    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
+    dict(
+        type='NormalizeMultiviewImage',
         mean=[123.675, 116.28, 103.53],
         std=[58.395, 57.12, 57.375],
         to_rgb=True),
-    dict(type='CustomLoadPointsFromFile',
+    dict(
+        type='CustomLoadPointsFromFile',
         coord_type='LIDAR',
         load_dim=5,
         use_dim=5,
         reduce_beams=32),
-    dict(type='CustomLoadPointsFromMultiSweeps',
+    dict(
+        type='CustomLoadPointsFromMultiSweeps',
         sweeps_num=9,
         load_dim=5,
         use_dim=5,
         reduce_beams=32,
         pad_empty_sweeps=True,
         remove_close=True),
-    dict(type='CustomPointsRangeFilter',
+    dict(
+        type='CustomPointsRangeFilter',
         point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]),
-    dict(type='MultiScaleFlipAug3D',
+    dict(
+        type='MultiScaleFlipAug3D',
         img_scale=(1600, 900),
         pts_scale_ratio=1,
         flip=False,
         transforms=[
-            dict(type='RandomScaleImageMultiViewImage',
-                scales=[0.5]),
-            dict(type='PadMultiViewImage',
-                size_divisor=32),
-            dict(type='DefaultFormatBundle3D',
-                class_names=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'],
+            dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),
+            dict(type='PadMultiViewImage', size_divisor=32),
+            dict(
+                type='DefaultFormatBundle3D',
+                class_names=[
+                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
+                    'traffic_cone'
+                ],
                 with_label=False),
-            dict(type='CustomCollect3D',
-                keys=['img', 'points'])])]
-eval_pipeline=[
-    dict(type='LoadPointsFromFile',
+            dict(type='CustomCollect3D', keys=['img', 'points'])
+        ])
+]
+eval_pipeline = [
+    dict(
+        type='LoadPointsFromFile',
         coord_type='LIDAR',
         load_dim=5,
         use_dim=5,
-        file_client_args=dict(
-            backend='disk')),
-    dict(type='LoadPointsFromMultiSweeps',
+        file_client_args=dict(backend='disk')),
+    dict(
+        type='LoadPointsFromMultiSweeps',
         sweeps_num=10,
-        file_client_args=dict(
-            backend='disk')),
-    dict(type='DefaultFormatBundle3D',
-        class_names=['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'],
+        file_client_args=dict(backend='disk')),
+    dict(
+        type='DefaultFormatBundle3D',
+        class_names=[
+            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
+            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
+        ],
         with_label=False),
-    dict(type='Collect3D',
-        keys=['points'])]
-data=dict(
+    dict(type='Collect3D', keys=['points'])
+]
+data = dict(
     samples_per_gpu=3,
     workers_per_gpu=1,
     train=dict(
         type='CustomNuScenesLocalMapDataset',
         data_root='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/',
-        ann_file='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_infos_temporal_train.pkl',
+        ann_file=
+        '/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_infos_temporal_train.pkl',
         pipeline=[
-            dict(type='LoadMultiViewImageFromFiles',
-                to_float32=True),
-            dict(type='CustomLoadPointsFromFile',
+            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
+            dict(
+                type='CustomLoadPointsFromFile',
                 coord_type='LIDAR',
                 load_dim=5,
                 use_dim=5,
                 reduce_beams=32),
-            dict(type='CustomLoadPointsFromMultiSweeps',
+            dict(
+                type='CustomLoadPointsFromMultiSweeps',
                 sweeps_num=9,
                 load_dim=5,
                 use_dim=5,
                 reduce_beams=32,
                 pad_empty_sweeps=True,
                 remove_close=True),
-            dict(type='CustomPointsRangeFilter',
+            dict(
+                type='CustomPointsRangeFilter',
                 point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]),
             dict(type='PhotoMetricDistortionMultiViewImage'),
-            dict(type='LoadAnnotations3D',
+            dict(
+                type='LoadAnnotations3D',
                 with_bbox_3d=True,
                 with_label_3d=True,
                 with_attr_label=False),
-            dict(type='ObjectRangeFilter',
+            dict(
+                type='ObjectRangeFilter',
                 point_cloud_range=[-15.0, -0.0, -2.0, 15.0, 30.0, 2.0]),
-            dict(type='ObjectNameFilter',
-                classes=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']),
-            dict(type='NormalizeMultiviewImage',
+            dict(
+                type='ObjectNameFilter',
+                classes=[
+                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
+                    'traffic_cone'
+                ]),
+            dict(
+                type='NormalizeMultiviewImage',
                 mean=[123.675, 116.28, 103.53],
                 std=[58.395, 57.12, 57.375],
                 to_rgb=True),
-            dict(type='RandomScaleImageMultiViewImage',
-                scales=[0.5]),
-            dict(type='PadMultiViewImage',
-                size_divisor=32),
-            dict(type='DefaultFormatBundle3D',
-                class_names=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']),
-            dict(type='CustomCollect3D',
-                keys=['gt_bboxes_3d', 'gt_labels_3d', 'img', 'points'])],
-        classes=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'],
+            dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),
+            dict(type='PadMultiViewImage', size_divisor=32),
+            dict(
+                type='DefaultFormatBundle3D',
+                class_names=[
+                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
+                    'traffic_cone'
+                ]),
+            dict(
+                type='CustomCollect3D',
+                keys=['gt_bboxes_3d', 'gt_labels_3d', 'img', 'points'])
+        ],
+        classes=[
+            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
+        ],
         modality=dict(
             use_lidar=True,
             use_camera=True,
@@ -163,43 +209,55 @@
         queue_length=1),
     val=dict(
         type='CustomNuScenesLocalMapDataset',
-        ann_file='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_infos_temporal_val.pkl',
+        ann_file=
+        '/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_infos_temporal_val.pkl',
         pipeline=[
-            dict(type='LoadMultiViewImageFromFiles',
-                to_float32=True),
-            dict(type='NormalizeMultiviewImage',
+            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
+            dict(
+                type='NormalizeMultiviewImage',
                 mean=[123.675, 116.28, 103.53],
                 std=[58.395, 57.12, 57.375],
                 to_rgb=True),
-            dict(type='CustomLoadPointsFromFile',
+            dict(
+                type='CustomLoadPointsFromFile',
                 coord_type='LIDAR',
                 load_dim=5,
                 use_dim=5,
                 reduce_beams=32),
-            dict(type='CustomLoadPointsFromMultiSweeps',
+            dict(
+                type='CustomLoadPointsFromMultiSweeps',
                 sweeps_num=9,
                 load_dim=5,
                 use_dim=5,
                 reduce_beams=32,
                 pad_empty_sweeps=True,
                 remove_close=True),
-            dict(type='CustomPointsRangeFilter',
+            dict(
+                type='CustomPointsRangeFilter',
                 point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]),
-            dict(type='MultiScaleFlipAug3D',
+            dict(
+                type='MultiScaleFlipAug3D',
                 img_scale=(1600, 900),
                 pts_scale_ratio=1,
                 flip=False,
                 transforms=[
-                    dict(type='RandomScaleImageMultiViewImage',
-                        scales=[0.5]),
-                    dict(type='PadMultiViewImage',
-                        size_divisor=32),
-                    dict(type='DefaultFormatBundle3D',
-                        class_names=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'],
+                    dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),
+                    dict(type='PadMultiViewImage', size_divisor=32),
+                    dict(
+                        type='DefaultFormatBundle3D',
+                        class_names=[
+                            'car', 'truck', 'construction_vehicle', 'bus',
+                            'trailer', 'barrier', 'motorcycle', 'bicycle',
+                            'pedestrian', 'traffic_cone'
+                        ],
                         with_label=False),
-                    dict(type='CustomCollect3D',
-                        keys=['img', 'points'])])],
-        classes=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'],
+                    dict(type='CustomCollect3D', keys=['img', 'points'])
+                ])
+        ],
+        classes=[
+            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
+        ],
         modality=dict(
             use_lidar=True,
             use_camera=True,
@@ -209,7 +267,8 @@
         test_mode=True,
         box_type_3d='LiDAR',
         data_root='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/',
-        map_ann_file='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_map_anns_val.json',
+        map_ann_file=
+        '/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_map_anns_val.json',
         bev_size=(200, 100),
         pc_range=[-15.0, -0.0, -2.0, 15.0, 30.0, 2.0],
         fixed_ptsnum_per_line=20,
@@ -220,43 +279,55 @@
     test=dict(
         type='CustomNuScenesLocalMapDataset',
         data_root='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/',
-        ann_file='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_infos_temporal_val.pkl',
+        ann_file=
+        '/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_infos_temporal_val.pkl',
         pipeline=[
-            dict(type='LoadMultiViewImageFromFiles',
-                to_float32=True),
-            dict(type='NormalizeMultiviewImage',
+            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
+            dict(
+                type='NormalizeMultiviewImage',
                 mean=[123.675, 116.28, 103.53],
                 std=[58.395, 57.12, 57.375],
                 to_rgb=True),
-            dict(type='CustomLoadPointsFromFile',
+            dict(
+                type='CustomLoadPointsFromFile',
                 coord_type='LIDAR',
                 load_dim=5,
                 use_dim=5,
                 reduce_beams=32),
-            dict(type='CustomLoadPointsFromMultiSweeps',
+            dict(
+                type='CustomLoadPointsFromMultiSweeps',
                 sweeps_num=9,
                 load_dim=5,
                 use_dim=5,
                 reduce_beams=32,
                 pad_empty_sweeps=True,
                 remove_close=True),
-            dict(type='CustomPointsRangeFilter',
+            dict(
+                type='CustomPointsRangeFilter',
                 point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]),
-            dict(type='MultiScaleFlipAug3D',
+            dict(
+                type='MultiScaleFlipAug3D',
                 img_scale=(1600, 900),
                 pts_scale_ratio=1,
                 flip=False,
                 transforms=[
-                    dict(type='RandomScaleImageMultiViewImage',
-                        scales=[0.5]),
-                    dict(type='PadMultiViewImage',
-                        size_divisor=32),
-                    dict(type='DefaultFormatBundle3D',
-                        class_names=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'],
+                    dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),
+                    dict(type='PadMultiViewImage', size_divisor=32),
+                    dict(
+                        type='DefaultFormatBundle3D',
+                        class_names=[
+                            'car', 'truck', 'construction_vehicle', 'bus',
+                            'trailer', 'barrier', 'motorcycle', 'bicycle',
+                            'pedestrian', 'traffic_cone'
+                        ],
                         with_label=False),
-                    dict(type='CustomCollect3D',
-                        keys=['img', 'points'])])],
-        classes=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'],
+                    dict(type='CustomCollect3D', keys=['img', 'points'])
+                ])
+        ],
+        classes=[
+            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
+        ],
         modality=dict(
             use_lidar=True,
             use_camera=True,
@@ -265,90 +336,92 @@
             use_external=True),
         test_mode=True,
         box_type_3d='LiDAR',
-        map_ann_file='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_map_anns_val.json',
+        map_ann_file=
+        '/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_map_anns_val.json',
         bev_size=(200, 100),
         pc_range=[-15.0, -0.0, -2.0, 15.0, 30.0, 2.0],
         fixed_ptsnum_per_line=20,
         eval_use_same_gt_sample_num_flag=True,
         padding_value=-10000,
         map_classes=['divider', 'ped_crossing', 'boundary']),
-    shuffler_sampler=dict(
-        type='DistributedGroupSampler'),
-    nonshuffler_sampler=dict(
-        type='DistributedSampler'))
-evaluation=dict(
+    shuffler_sampler=dict(type='DistributedGroupSampler'),
+    nonshuffler_sampler=dict(type='DistributedSampler'))
+evaluation = dict(
     interval=2,
     pipeline=[
-        dict(type='LoadMultiViewImageFromFiles',
-            to_float32=True),
-        dict(type='NormalizeMultiviewImage',
+        dict(type='LoadMultiViewImageFromFiles', to_float32=True),
+        dict(
+            type='NormalizeMultiviewImage',
             mean=[123.675, 116.28, 103.53],
             std=[58.395, 57.12, 57.375],
             to_rgb=True),
-        dict(type='CustomLoadPointsFromFile',
+        dict(
+            type='CustomLoadPointsFromFile',
             coord_type='LIDAR',
             load_dim=5,
             use_dim=5,
             reduce_beams=32),
-        dict(type='CustomLoadPointsFromMultiSweeps',
+        dict(
+            type='CustomLoadPointsFromMultiSweeps',
             sweeps_num=9,
             load_dim=5,
             use_dim=5,
             reduce_beams=32,
             pad_empty_sweeps=True,
             remove_close=True),
-        dict(type='CustomPointsRangeFilter',
+        dict(
+            type='CustomPointsRangeFilter',
             point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]),
-        dict(type='MultiScaleFlipAug3D',
+        dict(
+            type='MultiScaleFlipAug3D',
             img_scale=(1600, 900),
             pts_scale_ratio=1,
             flip=False,
             transforms=[
-                dict(type='RandomScaleImageMultiViewImage',
-                    scales=[0.5]),
-                dict(type='PadMultiViewImage',
-                    size_divisor=32),
-                dict(type='DefaultFormatBundle3D',
-                    class_names=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'],
+                dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),
+                dict(type='PadMultiViewImage', size_divisor=32),
+                dict(
+                    type='DefaultFormatBundle3D',
+                    class_names=[
+                        'car', 'truck', 'construction_vehicle', 'bus',
+                        'trailer', 'barrier', 'motorcycle', 'bicycle',
+                        'pedestrian', 'traffic_cone'
+                    ],
                     with_label=False),
-                dict(type='CustomCollect3D',
-                    keys=['img', 'points'])])],
+                dict(type='CustomCollect3D', keys=['img', 'points'])
+            ])
+    ],
     metric='chamfer')
-checkpoint_config=dict(
-    interval=1)
-log_config=dict(
+checkpoint_config = dict(interval=1)
+log_config = dict(
     interval=50,
-    hooks=[
-        dict(type='TextLoggerHook'),
-        dict(type='TensorboardLoggerHook')])
-dist_params=dict(
-    backend='nccl')
-log_level='INFO'
-work_dir='./work_dirs/maptr_tiny_fusion_24e'
-load_from=None
-resume_from=None
-workflow=[('train', 1)]
-plugin=True
-plugin_dir='projects/mmdet3d_plugin/'
-lidar_point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]
-voxel_size=[0.1, 0.1, 0.2]
-img_norm_cfg=dict(
-    mean=[123.675, 116.28, 103.53],
-    std=[58.395, 57.12, 57.375],
-    to_rgb=True)
-map_classes=['divider', 'ped_crossing', 'boundary']
-fixed_ptsnum_per_gt_line=20
-fixed_ptsnum_per_pred_line=20
-eval_use_same_gt_sample_num_flag=True
-num_map_classes=3
-_dim_=256
-_pos_dim_=128
-_ffn_dim_=512
-_num_levels_=1
-bev_h_=200
-bev_w_=100
-queue_length=1
-model=dict(
+    hooks=[dict(type='TextLoggerHook'),
+           dict(type='TensorboardLoggerHook')])
+dist_params = dict(backend='nccl')
+log_level = 'INFO'
+work_dir = './work_dirs/maptr_tiny_fusion_24e'
+load_from = None
+resume_from = None
+workflow = [('train', 1)]
+plugin = True
+plugin_dir = 'projects/mmdet3d_plugin/'
+lidar_point_cloud_range = [-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]
+voxel_size = [0.1, 0.1, 0.2]
+img_norm_cfg = dict(
+    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
+map_classes = ['divider', 'ped_crossing', 'boundary']
+fixed_ptsnum_per_gt_line = 20
+fixed_ptsnum_per_pred_line = 20
+eval_use_same_gt_sample_num_flag = True
+num_map_classes = 3
+_dim_ = 256
+_pos_dim_ = 128
+_ffn_dim_ = 512
+_num_levels_ = 1
+bev_h_ = 200
+bev_w_ = 100
+queue_length = 1
+model = dict(
     type='MapTR',
     use_grid_mask=True,
     video_test_mode=False,
@@ -365,20 +438,18 @@
             sparse_shape=[300, 600, 41],
             output_channels=128,
             order=('conv', 'norm', 'act'),
-            encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128, 128)),
+            encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128),
+                              (128, 128)),
             encoder_paddings=([0, 0, 1], [0, 0, 1], [0, 0, [1, 1, 0]], [0, 0]),
             block_type='basicblock')),
-    pretrained=dict(
-        img='ckpts/resnet50-19c8e357.pth'),
+    pretrained=dict(img='ckpts/resnet50-19c8e357.pth'),
     img_backbone=dict(
         type='ResNet',
         depth=50,
         num_stages=4,
-        out_indices=(3,),
+        out_indices=(3, ),
         frozen_stages=1,
-        norm_cfg=dict(
-            type='BN',
-            requires_grad=False),
+        norm_cfg=dict(type='BN', requires_grad=False),
         norm_eval=True,
         style='pytorch'),
     img_neck=dict(
@@ -416,9 +487,7 @@
             embed_dims=256,
             modality='fusion',
             fuser=dict(
-                type='ConvFuser',
-                in_channels=[256, 256],
-                out_channels=256),
+                type='ConvFuser', in_channels=[256, 256], out_channels=256),
             encoder=dict(
                 type='BEVFormerEncoder',
                 num_layers=1,
@@ -428,10 +497,12 @@
                 transformerlayers=dict(
                     type='BEVFormerLayer',
                     attn_cfgs=[
-                        dict(type='TemporalSelfAttention',
+                        dict(
+                            type='TemporalSelfAttention',
                             embed_dims=256,
                             num_levels=1),
-                        dict(type='GeometrySptialCrossAttention',
+                        dict(
+                            type='GeometrySptialCrossAttention',
                             pc_range=[-15.0, -0.0, -2.0, 15.0, 30.0, 2.0],
                             attention=dict(
                                 type='GeometryKernelAttention',
@@ -440,10 +511,12 @@
                                 dilation=1,
                                 kernel_size=(3, 5),
                                 num_levels=1),
-                            embed_dims=256)],
+                            embed_dims=256)
+                    ],
                     feedforward_channels=512,
                     ffn_dropout=0.1,
-                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm', 'ffn', 'norm'))),
+                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
+                                     'ffn', 'norm'))),
             decoder=dict(
                 type='MapTRDecoder',
                 num_layers=6,
@@ -451,16 +524,20 @@
                 transformerlayers=dict(
                     type='DetrTransformerDecoderLayer',
                     attn_cfgs=[
-                        dict(type='MultiheadAttention',
+                        dict(
+                            type='MultiheadAttention',
                             embed_dims=256,
                             num_heads=8,
                             dropout=0.1),
-                        dict(type='CustomMSDeformableAttention',
+                        dict(
+                            type='CustomMSDeformableAttention',
                             embed_dims=256,
-                            num_levels=1)],
+                            num_levels=1)
+                    ],
                     feedforward_channels=512,
                     ffn_dropout=0.1,
-                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm', 'ffn', 'norm')))),
+                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
+                                     'ffn', 'norm')))),
         bbox_coder=dict(
             type='MapTRNMSFreeCoder',
             post_center_range=[-20, -35, -20, -35, 20, 35, 20, 35],
@@ -479,18 +556,10 @@
             gamma=2.0,
             alpha=0.25,
             loss_weight=2.0),
-        loss_bbox=dict(
-            type='L1Loss',
-            loss_weight=0.0),
-        loss_iou=dict(
-            type='GIoULoss',
-            loss_weight=0.0),
-        loss_pts=dict(
-            type='PtsL1Loss',
-            loss_weight=5.0),
-        loss_dir=dict(
-            type='PtsDirCosLoss',
-            loss_weight=0.005)),
+        loss_bbox=dict(type='L1Loss', loss_weight=0.0),
+        loss_iou=dict(type='GIoULoss', loss_weight=0.0),
+        loss_pts=dict(type='PtsL1Loss', loss_weight=5.0),
+        loss_dir=dict(type='PtsDirCosLoss', loss_weight=0.005)),
     train_cfg=dict(
         pts=dict(
             grid_size=[512, 512, 1],
@@ -499,47 +568,29 @@
             out_size_factor=4,
             assigner=dict(
                 type='MapTRAssigner',
-                cls_cost=dict(
-                    type='FocalLossCost',
-                    weight=2.0),
+                cls_cost=dict(type='FocalLossCost', weight=2.0),
                 reg_cost=dict(
-                    type='BBoxL1Cost',
-                    weight=0.0,
-                    box_format='xywh'),
-                iou_cost=dict(
-                    type='IoUCost',
-                    iou_mode='giou',
-                    weight=0.0),
-                pts_cost=dict(
-                    type='OrderedPtsL1Cost',
-                    weight=5),
+                    type='BBoxL1Cost', weight=0.0, box_format='xywh'),
+                iou_cost=dict(type='IoUCost', iou_mode='giou', weight=0.0),
+                pts_cost=dict(type='OrderedPtsL1Cost', weight=5),
                 pc_range=[-15.0, -0.0, -2.0, 15.0, 30.0, 2.0]))))
-reduce_beams=32
-load_dim=5
-use_dim=5
-optimizer=dict(
+reduce_beams = 32
+load_dim = 5
+use_dim = 5
+optimizer = dict(
     type='AdamW',
     lr=0.0006,
-    paramwise_cfg=dict(
-        custom_keys=dict(
-            img_backbone=dict(
-                lr_mult=0.1))),
+    paramwise_cfg=dict(custom_keys=dict(img_backbone=dict(lr_mult=0.1))),
     weight_decay=0.01)
-optimizer_config=dict(
-    grad_clip=dict(
-        max_norm=35,
-        norm_type=2))
-lr_config=dict(
+optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
+lr_config = dict(
     policy='CosineAnnealing',
     warmup='linear',
     warmup_iters=500,
     warmup_ratio=0.3333333333333333,
     min_lr_ratio=0.001)
-total_epochs=24
-runner=dict(
-    type='EpochBasedRunner',
-    max_epochs=24)
-fp16=dict(
-    loss_scale=512.0)
-find_unused_parameters=True
-gpu_ids=range(0, 1)
+total_epochs = 24
+runner = dict(type='EpochBasedRunner', max_epochs=24)
+fp16 = dict(loss_scale=512.0)
+find_unused_parameters = True
+gpu_ids = range(0, 1)

2023-10-17 21:20:01,162 - mmdet - INFO - Set random seed to 0, deterministic: True
/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/bevformer/modules/custom_base_transformer_layer.py:94: UserWarning: The arguments `feedforward_channels` in BaseTransformerLayer has been deprecated, now you should set `feedforward_channels` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/bevformer/modules/custom_base_transformer_layer.py:94: UserWarning: The arguments `ffn_dropout` in BaseTransformerLayer has been deprecated, now you should set `ffn_drop` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/bevformer/modules/custom_base_transformer_layer.py:94: UserWarning: The arguments `ffn_num_fcs` in BaseTransformerLayer has been deprecated, now you should set `num_fcs` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py:341: UserWarning: The arguments `feedforward_channels` in BaseTransformerLayer has been deprecated, now you should set `feedforward_channels` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py:341: UserWarning: The arguments `ffn_dropout` in BaseTransformerLayer has been deprecated, now you should set `ffn_drop` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py:341: UserWarning: The arguments `ffn_num_fcs` in BaseTransformerLayer has been deprecated, now you should set `num_fcs` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py:92: UserWarning: The arguments `dropout` in MultiheadAttention has been deprecated, now you can separately set `attn_drop`(float), proj_drop(float), and `dropout_layer`(dict) 
  warnings.warn('The arguments `dropout` in MultiheadAttention '
/home/ld_t4/Documents/ShuoShen/MapTR/mmdetection3d/mmdet3d/models/detectors/mvx_two_stage.py:87: UserWarning: DeprecationWarning: pretrained is a deprecated                     key, please consider using init_cfg
  warnings.warn('DeprecationWarning: pretrained is a deprecated \
2023-10-17 21:20:01,437 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'ckpts/resnet50-19c8e357.pth'}
2023-10-17 21:20:01,437 - mmcv - INFO - load model from: ckpts/resnet50-19c8e357.pth
2023-10-17 21:20:01,437 - mmcv - INFO - load checkpoint from local path: ckpts/resnet50-19c8e357.pth
2023-10-17 21:20:01,536 - mmcv - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

2023-10-17 21:20:01,542 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-10-17 21:20:01,552 - mmdet - INFO - Model:
MapTR(
  (pts_bbox_head): MapTRHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (loss_iou): GIoULoss()
    (activate): ReLU(inplace=True)
    (positional_encoding): LearnedPositionalEncoding(num_feats=128, row_num_embed=200, col_num_embed=100)
    (transformer): MapTRPerceptionTransformer(
      (fuser): ConvFuser(
        (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (encoder): BEVFormerEncoder(
        (layers): ModuleList(
          (0): BEVFormerLayer(
            (attentions): ModuleList(
              (0): TemporalSelfAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=128, bias=True)
                (attention_weights): Linear(in_features=512, out_features=64, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (1): GeometrySptialCrossAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (attention): GeometryKernelAttention(
                  (attention_weights): Linear(in_features=256, out_features=60, bias=True)
                  (value_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (decoder): MapTRDecoder(
        (layers): ModuleList(
          (0): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (reference_points): Linear(in_features=256, out_features=2, bias=True)
      (can_bus_mlp): Sequential(
        (0): Linear(in_features=18, out_features=128, bias=True)
        (1): ReLU(inplace=True)
        (2): Linear(in_features=128, out_features=256, bias=True)
        (3): ReLU(inplace=True)
        (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (cls_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=3, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=3, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=3, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=3, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=3, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=3, bias=True)
      )
    )
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=2, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=2, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=2, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=2, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=2, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=2, bias=True)
      )
    )
    (bev_embedding): Embedding(20000, 256)
    (instance_embedding): Embedding(50, 512)
    (pts_embedding): Embedding(20, 512)
    (loss_pts): PtsL1Loss()
    (loss_dir): PtsDirCosLoss()
  )
  (img_backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'ckpts/resnet50-19c8e357.pth'}
  (img_neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (grid_mask): GridMask()
  (lidar_modal_extractor): ModuleDict(
    (voxelize): Voxelization(voxel_size=[0.1, 0.1, 0.2], point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0], max_num_points=10, max_voxels=(90000, 120000), deterministic=True)
    (backbone): SparseEncoder(
      (conv_input): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (encoder_layers): SparseSequential(
        (encoder_layer1): SparseSequential(
          (0): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (1): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): SparseSequential(
            (0): SparseConv3d()
            (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
        (encoder_layer2): SparseSequential(
          (0): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (1): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): SparseSequential(
            (0): SparseConv3d()
            (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
        (encoder_layer3): SparseSequential(
          (0): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (1): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): SparseSequential(
            (0): SparseConv3d()
            (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
        (encoder_layer4): SparseSequential(
          (0): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (1): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
        )
      )
      (conv_out): SparseSequential(
        (0): SparseConv3d()
        (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
)
2023-10-17 21:20:07,229 - mmdet - INFO - Start running, host: ld_t4@ld-t4, work_dir: /home/ld_t4/Documents/ShuoShen/MapTR/work_dirs/maptr_tiny_fusion_24e
2023-10-17 21:20:07,229 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2023-10-17 21:20:07,229 - mmdet - INFO - workflow: [('train', 1)], max: 24 epochs
2023-10-17 21:20:07,231 - mmdet - INFO - Checkpoints will be saved to /home/ld_t4/Documents/ShuoShen/MapTR/work_dirs/maptr_tiny_fusion_24e by HardDiskBackend.
/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/models/utils/grid_mask.py:114: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:180.)
  mask = torch.from_numpy(mask).to(x.dtype).cuda()
[W reducer.cpp:1158] Warning: find_unused_parameters=True was specified in DDP constructor, but did not find any unused parameters in the forward pass. This flag results in an extra traversal of the autograd graph every iteration,  which can adversely affect performance. If your model indeed never has any unused parameters in the forward pass, consider turning this flag off. Note that this warning may be a false positive if your model has flow control causing later iterations to have unused parameters. (function operator())
2023-10-17 21:20:52,256 - mmdet - INFO - Epoch [1][50/1257]	lr: 2.392e-04, eta: 7:29:17, time: 0.895, data_time: 0.060, memory: 6107, loss_cls: 0.9479, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 32.7153, loss_dir: 0.0927, d0.loss_cls: 0.9653, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 33.6113, d0.loss_dir: 0.0917, d1.loss_cls: 0.9306, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 32.8900, d1.loss_dir: 0.0926, d2.loss_cls: 0.9425, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 32.3718, d2.loss_dir: 0.0930, d3.loss_cls: 0.9491, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 32.2515, d3.loss_dir: 0.0925, d4.loss_cls: 0.9631, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 32.4138, d4.loss_dir: 0.0928, loss: 202.5075, grad_norm: 82.5157
2023-10-17 21:23:35,805 - mmdet - INFO - Epoch [1][100/1257]	lr: 2.792e-04, eta: 17:23:52, time: 3.271, data_time: 2.408, memory: 6132, loss_cls: 0.7720, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 24.8050, loss_dir: 0.0832, d0.loss_cls: 0.7266, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 24.7443, d0.loss_dir: 0.0803, d1.loss_cls: 0.7574, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 24.1523, d1.loss_dir: 0.0820, d2.loss_cls: 0.7689, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 24.5248, d2.loss_dir: 0.0830, d3.loss_cls: 0.7722, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 24.6034, d3.loss_dir: 0.0830, d4.loss_cls: 0.7709, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 24.6825, d4.loss_dir: 0.0831, loss: 152.5746, grad_norm: 86.5176
2023-10-17 21:26:20,140 - mmdet - INFO - Epoch [1][150/1257]	lr: 3.192e-04, eta: 20:42:52, time: 3.287, data_time: 2.421, memory: 6132, loss_cls: 0.7713, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 22.9610, loss_dir: 0.0781, d0.loss_cls: 0.6906, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 22.5312, d0.loss_dir: 0.0762, d1.loss_cls: 0.7527, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 22.4340, d1.loss_dir: 0.0771, d2.loss_cls: 0.7687, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 22.5273, d2.loss_dir: 0.0772, d3.loss_cls: 0.7693, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 22.6692, d3.loss_dir: 0.0775, d4.loss_cls: 0.7687, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 22.7880, d4.loss_dir: 0.0780, loss: 140.8962, grad_norm: 82.4764
2023-10-17 21:27:02,338 - mmdet - INFO - Epoch [1][200/1257]	lr: 3.592e-04, eta: 17:15:58, time: 0.844, data_time: 0.004, memory: 6132, loss_cls: 0.7661, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 22.7882, loss_dir: 0.0749, d0.loss_cls: 0.7104, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 22.5075, d0.loss_dir: 0.0743, d1.loss_cls: 0.7407, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 22.4208, d1.loss_dir: 0.0744, d2.loss_cls: 0.7686, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 22.4230, d2.loss_dir: 0.0747, d3.loss_cls: 0.7671, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 22.5344, d3.loss_dir: 0.0749, d4.loss_cls: 0.7686, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 22.6516, d4.loss_dir: 0.0753, loss: 140.2954, grad_norm: 75.8578
2023-10-17 21:28:03,584 - mmdet - INFO - Epoch [1][250/1257]	lr: 3.992e-04, eta: 15:49:33, time: 1.225, data_time: 0.365, memory: 6132, loss_cls: 0.7641, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 21.6737, loss_dir: 0.0726, d0.loss_cls: 0.7048, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 21.6620, d0.loss_dir: 0.0722, d1.loss_cls: 0.7198, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 21.5794, d1.loss_dir: 0.0721, d2.loss_cls: 0.7569, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 21.5996, d2.loss_dir: 0.0723, d3.loss_cls: 0.7616, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 21.6043, d3.loss_dir: 0.0725, d4.loss_cls: 0.7657, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 21.6488, d4.loss_dir: 0.0724, loss: 134.6750, grad_norm: 75.7773
2023-10-17 21:31:22,956 - mmdet - INFO - Epoch [1][300/1257]	lr: 4.392e-04, eta: 18:40:48, time: 3.987, data_time: 3.076, memory: 6132, loss_cls: 0.7567, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 22.4789, loss_dir: 0.0727, d0.loss_cls: 0.7129, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 22.4258, d0.loss_dir: 0.0728, d1.loss_cls: 0.7177, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 22.4130, d1.loss_dir: 0.0721, d2.loss_cls: 0.7526, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 22.3935, d2.loss_dir: 0.0722, d3.loss_cls: 0.7577, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 22.4294, d3.loss_dir: 0.0725, d4.loss_cls: 0.7584, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 22.4429, d4.loss_dir: 0.0726, loss: 139.4743, grad_norm: 74.5487
2023-10-17 21:35:25,377 - mmdet - INFO - Epoch [1][350/1257]	lr: 4.792e-04, eta: 21:43:17, time: 4.848, data_time: 3.921, memory: 6132, loss_cls: 0.7444, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 20.8617, loss_dir: 0.0691, d0.loss_cls: 0.6952, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.8218, d0.loss_dir: 0.0692, d1.loss_cls: 0.6962, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 20.8037, d1.loss_dir: 0.0692, d2.loss_cls: 0.7391, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 20.8103, d2.loss_dir: 0.0694, d3.loss_cls: 0.7559, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 20.8020, d3.loss_dir: 0.0693, d4.loss_cls: 0.7606, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 20.8155, d4.loss_dir: 0.0692, loss: 129.7218, grad_norm: 80.9819
2023-10-17 21:38:35,484 - mmdet - INFO - Epoch [1][400/1257]	lr: 5.192e-04, eta: 22:54:15, time: 3.802, data_time: 2.906, memory: 6132, loss_cls: 0.7370, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 21.6282, loss_dir: 0.0717, d0.loss_cls: 0.7102, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 21.4876, d0.loss_dir: 0.0711, d1.loss_cls: 0.7133, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 21.4412, d1.loss_dir: 0.0713, d2.loss_cls: 0.7314, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 21.4599, d2.loss_dir: 0.0712, d3.loss_cls: 0.7549, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 21.5454, d3.loss_dir: 0.0714, d4.loss_cls: 0.7696, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 21.5718, d4.loss_dir: 0.0715, loss: 133.9787, grad_norm: 80.9014
2023-10-17 21:41:27,083 - mmdet - INFO - Epoch [1][450/1257]	lr: 5.592e-04, eta: 23:28:23, time: 3.432, data_time: 2.545, memory: 6132, loss_cls: 0.7317, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 21.4632, loss_dir: 0.0697, d0.loss_cls: 0.7087, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 21.3700, d0.loss_dir: 0.0696, d1.loss_cls: 0.7146, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 21.3417, d1.loss_dir: 0.0696, d2.loss_cls: 0.7267, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 21.3691, d2.loss_dir: 0.0696, d3.loss_cls: 0.7484, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 21.4130, d3.loss_dir: 0.0697, d4.loss_cls: 0.7541, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 21.4448, d4.loss_dir: 0.0697, loss: 133.2040, grad_norm: 77.1204
2023-10-17 21:44:47,804 - mmdet - INFO - Epoch [1][500/1257]	lr: 5.992e-04, eta: 1 day, 0:23:55, time: 4.014, data_time: 3.110, memory: 6132, loss_cls: 0.7272, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 21.8923, loss_dir: 0.0708, d0.loss_cls: 0.7194, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 21.8439, d0.loss_dir: 0.0704, d1.loss_cls: 0.7183, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 21.8218, d1.loss_dir: 0.0706, d2.loss_cls: 0.7242, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 21.8337, d2.loss_dir: 0.0707, d3.loss_cls: 0.7307, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 21.8513, d3.loss_dir: 0.0707, d4.loss_cls: 0.7461, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 21.8785, d4.loss_dir: 0.0707, loss: 135.9114, grad_norm: 76.7060
2023-10-17 21:48:14,772 - mmdet - INFO - Epoch [1][550/1257]	lr: 6.000e-04, eta: 1 day, 1:14:20, time: 4.139, data_time: 3.228, memory: 6132, loss_cls: 0.7128, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 20.7964, loss_dir: 0.0674, d0.loss_cls: 0.7037, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.8358, d0.loss_dir: 0.0674, d1.loss_cls: 0.7043, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 20.7729, d1.loss_dir: 0.0673, d2.loss_cls: 0.7118, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 20.7832, d2.loss_dir: 0.0674, d3.loss_cls: 0.7204, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 20.7886, d3.loss_dir: 0.0674, d4.loss_cls: 0.7246, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 20.7924, d4.loss_dir: 0.0674, loss: 129.4512, grad_norm: 71.7532
2023-10-17 21:51:24,060 - mmdet - INFO - Epoch [1][600/1257]	lr: 6.000e-04, eta: 1 day, 1:41:16, time: 3.786, data_time: 2.891, memory: 6132, loss_cls: 0.7288, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 21.4384, loss_dir: 0.0706, d0.loss_cls: 0.7225, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 21.4595, d0.loss_dir: 0.0708, d1.loss_cls: 0.7256, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 21.4056, d1.loss_dir: 0.0705, d2.loss_cls: 0.7291, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 21.4097, d2.loss_dir: 0.0706, d3.loss_cls: 0.7249, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 21.4188, d3.loss_dir: 0.0705, d4.loss_cls: 0.7279, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 21.4241, d4.loss_dir: 0.0705, loss: 133.3384, grad_norm: 76.9808
2023-10-17 21:54:53,585 - mmdet - INFO - Epoch [1][650/1257]	lr: 6.000e-04, eta: 1 day, 2:18:53, time: 4.191, data_time: 3.293, memory: 6132, loss_cls: 0.7126, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 21.0607, loss_dir: 0.0684, d0.loss_cls: 0.7132, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 21.0619, d0.loss_dir: 0.0683, d1.loss_cls: 0.7047, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 21.0361, d1.loss_dir: 0.0683, d2.loss_cls: 0.7097, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 21.0480, d2.loss_dir: 0.0684, d3.loss_cls: 0.7137, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 21.0551, d3.loss_dir: 0.0683, d4.loss_cls: 0.7152, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 21.0579, d4.loss_dir: 0.0684, loss: 130.9989, grad_norm: 81.1450
2023-10-17 21:58:31,800 - mmdet - INFO - Epoch [1][700/1257]	lr: 6.000e-04, eta: 1 day, 2:56:44, time: 4.364, data_time: 3.454, memory: 6132, loss_cls: 0.6918, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 21.2095, loss_dir: 0.0682, d0.loss_cls: 0.7083, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 21.1883, d0.loss_dir: 0.0679, d1.loss_cls: 0.6889, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 21.1668, d1.loss_dir: 0.0679, d2.loss_cls: 0.6916, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 21.1774, d2.loss_dir: 0.0679, d3.loss_cls: 0.6985, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 21.1855, d3.loss_dir: 0.0681, d4.loss_cls: 0.6983, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 21.1917, d4.loss_dir: 0.0683, loss: 131.7050, grad_norm: 75.5292
2023-10-17 22:02:04,004 - mmdet - INFO - Epoch [1][750/1257]	lr: 6.000e-04, eta: 1 day, 3:25:07, time: 4.244, data_time: 3.333, memory: 6132, loss_cls: 0.7015, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 20.9577, loss_dir: 0.0671, d0.loss_cls: 0.7079, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.7985, d0.loss_dir: 0.0669, d1.loss_cls: 0.6897, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 20.7585, d1.loss_dir: 0.0671, d2.loss_cls: 0.6859, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 20.7653, d2.loss_dir: 0.0671, d3.loss_cls: 0.6953, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 20.7999, d3.loss_dir: 0.0672, d4.loss_cls: 0.7014, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 20.8466, d4.loss_dir: 0.0670, loss: 129.5104, grad_norm: 83.4242
2023-10-17 22:05:41,212 - mmdet - INFO - Epoch [1][800/1257]	lr: 6.000e-04, eta: 1 day, 3:52:34, time: 4.344, data_time: 3.431, memory: 6132, loss_cls: 0.6864, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 20.8347, loss_dir: 0.0656, d0.loss_cls: 0.6764, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.8241, d0.loss_dir: 0.0657, d1.loss_cls: 0.6665, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 20.7379, d1.loss_dir: 0.0656, d2.loss_cls: 0.6796, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 20.7515, d2.loss_dir: 0.0656, d3.loss_cls: 0.6743, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 20.7812, d3.loss_dir: 0.0656, d4.loss_cls: 0.6852, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 20.7932, d4.loss_dir: 0.0655, loss: 129.1847, grad_norm: 81.0205
2023-10-17 22:09:09,002 - mmdet - INFO - Epoch [1][850/1257]	lr: 6.000e-04, eta: 1 day, 4:10:57, time: 4.156, data_time: 3.245, memory: 6132, loss_cls: 0.6857, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 21.1693, loss_dir: 0.0689, d0.loss_cls: 0.7150, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 21.2459, d0.loss_dir: 0.0688, d1.loss_cls: 0.6784, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 21.1084, d1.loss_dir: 0.0689, d2.loss_cls: 0.6807, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 21.1206, d2.loss_dir: 0.0690, d3.loss_cls: 0.6847, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 21.1420, d3.loss_dir: 0.0690, d4.loss_cls: 0.6813, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 21.1495, d4.loss_dir: 0.0689, loss: 131.4750, grad_norm: 78.1144
2023-10-17 22:12:31,584 - mmdet - INFO - Epoch [1][900/1257]	lr: 6.000e-04, eta: 1 day, 4:24:05, time: 4.052, data_time: 3.141, memory: 6132, loss_cls: 0.6719, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 20.6519, loss_dir: 0.0660, d0.loss_cls: 0.6848, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.7052, d0.loss_dir: 0.0661, d1.loss_cls: 0.6595, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 20.6099, d1.loss_dir: 0.0660, d2.loss_cls: 0.6638, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 20.6065, d2.loss_dir: 0.0660, d3.loss_cls: 0.6669, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 20.6363, d3.loss_dir: 0.0660, d4.loss_cls: 0.6646, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 20.6451, d4.loss_dir: 0.0660, loss: 128.2626, grad_norm: 81.3742
2023-10-17 22:15:58,804 - mmdet - INFO - Epoch [1][950/1257]	lr: 6.000e-04, eta: 1 day, 4:37:51, time: 4.144, data_time: 3.234, memory: 6132, loss_cls: 0.6690, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 20.7937, loss_dir: 0.0661, d0.loss_cls: 0.6881, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.9183, d0.loss_dir: 0.0667, d1.loss_cls: 0.6729, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 20.7469, d1.loss_dir: 0.0665, d2.loss_cls: 0.6727, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 20.7539, d2.loss_dir: 0.0665, d3.loss_cls: 0.6697, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 20.7684, d3.loss_dir: 0.0662, d4.loss_cls: 0.6715, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 20.7783, d4.loss_dir: 0.0662, loss: 129.2015, grad_norm: 80.1409
2023-10-17 22:19:10,850 - mmdet - INFO - Exp name: maptr_tiny_fusion_24e.py
2023-10-17 22:19:10,850 - mmdet - INFO - Epoch [1][1000/1257]	lr: 6.000e-04, eta: 1 day, 4:42:32, time: 3.841, data_time: 2.926, memory: 6132, loss_cls: 0.6507, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 20.0998, loss_dir: 0.0659, d0.loss_cls: 0.6844, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.2731, d0.loss_dir: 0.0659, d1.loss_cls: 0.6613, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 20.0530, d1.loss_dir: 0.0658, d2.loss_cls: 0.6555, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 20.0481, d2.loss_dir: 0.0657, d3.loss_cls: 0.6530, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 20.0608, d3.loss_dir: 0.0659, d4.loss_cls: 0.6555, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 20.0705, d4.loss_dir: 0.0660, loss: 124.9608, grad_norm: 74.8454
2023-10-17 22:22:18,758 - mmdet - INFO - Epoch [1][1050/1257]	lr: 6.000e-04, eta: 1 day, 4:44:32, time: 3.758, data_time: 2.850, memory: 6132, loss_cls: 0.6464, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 20.2189, loss_dir: 0.0654, d0.loss_cls: 0.6771, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.3637, d0.loss_dir: 0.0657, d1.loss_cls: 0.6392, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 20.2022, d1.loss_dir: 0.0656, d2.loss_cls: 0.6451, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 20.1861, d2.loss_dir: 0.0654, d3.loss_cls: 0.6494, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 20.1971, d3.loss_dir: 0.0653, d4.loss_cls: 0.6441, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 20.2054, d4.loss_dir: 0.0653, loss: 125.6675, grad_norm: 82.8793
2023-10-17 22:26:26,621 - mmdet - INFO - Epoch [1][1100/1257]	lr: 6.000e-04, eta: 1 day, 5:12:29, time: 4.957, data_time: 4.017, memory: 6132, loss_cls: 0.6345, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 20.0476, loss_dir: 0.0619, d0.loss_cls: 0.6713, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.2400, d0.loss_dir: 0.0620, d1.loss_cls: 0.6337, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 20.0190, d1.loss_dir: 0.0619, d2.loss_cls: 0.6385, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 20.0194, d2.loss_dir: 0.0617, d3.loss_cls: 0.6370, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 20.0308, d3.loss_dir: 0.0618, d4.loss_cls: 0.6387, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 20.0384, d4.loss_dir: 0.0618, loss: 124.6199, grad_norm: 84.0783
2023-10-17 22:29:52,671 - mmdet - INFO - Epoch [1][1150/1257]	lr: 6.000e-04, eta: 1 day, 5:20:04, time: 4.121, data_time: 3.215, memory: 6132, loss_cls: 0.6281, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 19.7929, loss_dir: 0.0628, d0.loss_cls: 0.6773, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.0987, d0.loss_dir: 0.0634, d1.loss_cls: 0.6289, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 19.7814, d1.loss_dir: 0.0630, d2.loss_cls: 0.6262, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 19.7726, d2.loss_dir: 0.0628, d3.loss_cls: 0.6288, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 19.7773, d3.loss_dir: 0.0628, d4.loss_cls: 0.6265, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 19.7857, d4.loss_dir: 0.0629, loss: 123.2020, grad_norm: 79.2906
2023-10-17 22:33:12,752 - mmdet - INFO - Epoch [1][1200/1257]	lr: 6.000e-04, eta: 1 day, 5:24:19, time: 4.002, data_time: 3.097, memory: 6132, loss_cls: 0.6552, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 21.1323, loss_dir: 0.0651, d0.loss_cls: 0.6968, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 21.3428, d0.loss_dir: 0.0658, d1.loss_cls: 0.6548, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 21.1259, d1.loss_dir: 0.0653, d2.loss_cls: 0.6522, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 21.1141, d2.loss_dir: 0.0650, d3.loss_cls: 0.6541, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 21.1189, d3.loss_dir: 0.0651, d4.loss_cls: 0.6541, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 21.1289, d4.loss_dir: 0.0650, loss: 131.3214, grad_norm: 75.4161
2023-10-17 22:36:58,743 - mmdet - INFO - Epoch [1][1250/1257]	lr: 6.000e-04, eta: 1 day, 5:37:58, time: 4.520, data_time: 3.599, memory: 6132, loss_cls: 0.6633, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 21.2177, loss_dir: 0.0671, d0.loss_cls: 0.6942, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 21.3005, d0.loss_dir: 0.0666, d1.loss_cls: 0.6559, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 21.1347, d1.loss_dir: 0.0667, d2.loss_cls: 0.6615, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 21.1354, d2.loss_dir: 0.0669, d3.loss_cls: 0.6629, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 21.1603, d3.loss_dir: 0.0669, d4.loss_cls: 0.6679, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 21.2047, d4.loss_dir: 0.0670, loss: 131.5602, grad_norm: 76.3909
2023-10-17 22:37:20,747 - mmdet - INFO - Saving checkpoint at 1 epochs
2023-10-17 22:45:39,092 - mmdet - INFO - Epoch [2][50/1257]	lr: 5.974e-04, eta: 1 day, 7:20:12, time: 9.952, data_time: 8.987, memory: 6132, loss_cls: 0.6542, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 20.1514, loss_dir: 0.0654, d0.loss_cls: 0.6788, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.4263, d0.loss_dir: 0.0656, d1.loss_cls: 0.6474, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 20.1382, d1.loss_dir: 0.0653, d2.loss_cls: 0.6495, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 20.1236, d2.loss_dir: 0.0652, d3.loss_cls: 0.6539, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 20.1400, d3.loss_dir: 0.0653, d4.loss_cls: 0.6605, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 20.1473, d4.loss_dir: 0.0652, loss: 125.4630, grad_norm: 83.7867
2023-10-17 22:54:20,622 - mmdet - INFO - Epoch [2][100/1257]	lr: 5.974e-04, eta: 1 day, 9:12:20, time: 10.431, data_time: 9.462, memory: 6132, loss_cls: 0.6465, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 20.0098, loss_dir: 0.0626, d0.loss_cls: 0.6856, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.2638, d0.loss_dir: 0.0630, d1.loss_cls: 0.6377, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 20.0065, d1.loss_dir: 0.0627, d2.loss_cls: 0.6336, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 19.9923, d2.loss_dir: 0.0627, d3.loss_cls: 0.6387, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 20.0006, d3.loss_dir: 0.0627, d4.loss_cls: 0.6473, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 20.0020, d4.loss_dir: 0.0627, loss: 124.5410, grad_norm: 76.7069
2023-10-17 23:02:32,472 - mmdet - INFO - Epoch [2][150/1257]	lr: 5.974e-04, eta: 1 day, 10:45:46, time: 9.837, data_time: 8.861, memory: 6132, loss_cls: 0.6253, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 20.0219, loss_dir: 0.0623, d0.loss_cls: 0.6653, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.1875, d0.loss_dir: 0.0626, d1.loss_cls: 0.6255, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 19.9656, d1.loss_dir: 0.0623, d2.loss_cls: 0.6204, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 19.9476, d2.loss_dir: 0.0624, d3.loss_cls: 0.6167, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 19.9662, d3.loss_dir: 0.0621, d4.loss_cls: 0.6219, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 19.9829, d4.loss_dir: 0.0622, loss: 124.2206, grad_norm: 80.6674
2023-10-17 23:11:19,875 - mmdet - INFO - Epoch [2][200/1257]	lr: 5.974e-04, eta: 1 day, 12:23:54, time: 10.548, data_time: 9.572, memory: 6132, loss_cls: 0.6454, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 20.1582, loss_dir: 0.0646, d0.loss_cls: 0.6756, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.4352, d0.loss_dir: 0.0649, d1.loss_cls: 0.6417, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 20.1567, d1.loss_dir: 0.0649, d2.loss_cls: 0.6418, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 20.1376, d2.loss_dir: 0.0647, d3.loss_cls: 0.6346, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 20.1462, d3.loss_dir: 0.0647, d4.loss_cls: 0.6453, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 20.1515, d4.loss_dir: 0.0647, loss: 125.4584, grad_norm: 86.2138
2023-10-17 23:19:52,191 - mmdet - INFO - Epoch [2][250/1257]	lr: 5.974e-04, eta: 1 day, 13:50:09, time: 10.246, data_time: 9.276, memory: 6132, loss_cls: 0.6071, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 19.9891, loss_dir: 0.0615, d0.loss_cls: 0.6661, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.2364, d0.loss_dir: 0.0620, d1.loss_cls: 0.6144, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 19.9781, d1.loss_dir: 0.0617, d2.loss_cls: 0.6044, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 19.9513, d2.loss_dir: 0.0616, d3.loss_cls: 0.6074, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 19.9745, d3.loss_dir: 0.0616, d4.loss_cls: 0.6023, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 19.9815, d4.loss_dir: 0.0616, loss: 124.1827, grad_norm: 77.8104
2023-10-17 23:29:31,352 - mmdet - INFO - Epoch [2][300/1257]	lr: 5.974e-04, eta: 1 day, 15:30:48, time: 11.583, data_time: 10.613, memory: 6132, loss_cls: 0.6387, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 20.7946, loss_dir: 0.0635, d0.loss_cls: 0.6764, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.9529, d0.loss_dir: 0.0634, d1.loss_cls: 0.6356, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 20.7798, d1.loss_dir: 0.0637, d2.loss_cls: 0.6315, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 20.7786, d2.loss_dir: 0.0635, d3.loss_cls: 0.6395, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 20.7817, d3.loss_dir: 0.0635, d4.loss_cls: 0.6364, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 20.7834, d4.loss_dir: 0.0636, loss: 129.1102, grad_norm: 71.4016
2023-10-17 23:39:31,228 - mmdet - INFO - Epoch [2][350/1257]	lr: 5.974e-04, eta: 1 day, 17:10:42, time: 11.998, data_time: 11.034, memory: 6132, loss_cls: 0.6130, loss_bbox: 0.0000, loss_iou: 0.0000, loss_pts: 19.7607, loss_dir: 0.0624, d0.loss_cls: 0.6533, d0.loss_bbox: 0.0000, d0.loss_iou: 0.0000, d0.loss_pts: 20.0228, d0.loss_dir: 0.0625, d1.loss_cls: 0.5960, d1.loss_bbox: 0.0000, d1.loss_iou: 0.0000, d1.loss_pts: 19.7354, d1.loss_dir: 0.0627, d2.loss_cls: 0.5979, d2.loss_bbox: 0.0000, d2.loss_iou: 0.0000, d2.loss_pts: 19.7163, d2.loss_dir: 0.0625, d3.loss_cls: 0.5994, d3.loss_bbox: 0.0000, d3.loss_iou: 0.0000, d3.loss_pts: 19.7205, d3.loss_dir: 0.0623, d4.loss_cls: 0.6057, d4.loss_bbox: 0.0000, d4.loss_iou: 0.0000, d4.loss_pts: 19.7465, d4.loss_dir: 0.0623, loss: 122.7420, grad_norm: 75.7387
Traceback (most recent call last):
  File "tools/train.py", line 260, in <module>
    main()
  File "tools/train.py", line 249, in main
    custom_train_model(
  File "/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/bevformer/apis/train.py", line 27, in custom_train_model
    custom_train_detector(
  File "/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/bevformer/apis/mmdet_train.py", line 199, in custom_train_detector
    runner.run(data_loaders, cfg.workflow)
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 127, in run
    epoch_runner(data_loaders[i], **kwargs)
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 50, in train
    self.run_iter(data_batch, train_mode=True, **kwargs)
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmcv/runner/epoch_based_runner.py", line 29, in run_iter
    outputs = self.model.train_step(data_batch, self.optimizer,
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmcv/parallel/distributed.py", line 52, in train_step
    output = self.module.train_step(*inputs[0], **kwargs[0])
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmdet/models/detectors/base.py", line 237, in train_step
    losses = self(**data)
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/maptr/detectors/maptr.py", line 162, in forward
    return self.forward_train(**kwargs)
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py", line 214, in new_func
    output = old_func(*new_args, **new_kwargs)
  File "/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/maptr/detectors/maptr.py", line 280, in forward_train
    losses_pts = self.forward_pts_train(img_feats, lidar_feat, gt_bboxes_3d,
  File "/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/maptr/detectors/maptr.py", line 144, in forward_pts_train
    losses = self.pts_bbox_head.loss(*loss_inputs, img_metas=img_metas)
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmcv/runner/fp16_utils.py", line 214, in new_func
    output = old_func(*new_args, **new_kwargs)
  File "/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/maptr/dense_heads/maptr_head.py", line 696, in loss
    losses_cls, losses_bbox, losses_iou, losses_pts, losses_dir = multi_apply(
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmdet/core/utils/misc.py", line 29, in multi_apply
    return tuple(map(list, zip(*map_results)))
  File "/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/maptr/dense_heads/maptr_head.py", line 520, in loss_single
    cls_reg_targets = self.get_targets(cls_scores_list, bbox_preds_list,pts_preds_list,
  File "/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/maptr/dense_heads/maptr_head.py", line 478, in get_targets
    pos_inds_list, neg_inds_list) = multi_apply(
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmdet/core/utils/misc.py", line 29, in multi_apply
    return tuple(map(list, zip(*map_results)))
  File "/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/maptr/dense_heads/maptr_head.py", line 385, in _get_target_single
    assign_result, order_index = self.assigner.assign(bbox_pred, cls_score, pts_pred,
  File "/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/maptr/assigners/maptr_assigner.py", line 182, in assign
    matched_row_inds, matched_col_inds = linear_sum_assignment(cost)
ValueError: matrix contains invalid numeric entries
/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/torch/distributed/launch.py:178: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torch.distributed.run.
Note that --use_env is set by default in torch.distributed.run.
If your script expects `--local_rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: 1) local_rank: 0 (pid: 38970) of binary: /media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/bin/python3
Traceback (most recent call last):
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/torch/distributed/launch.py", line 193, in <module>
    main()
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/torch/distributed/launch.py", line 189, in main
    launch(args)
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/torch/distributed/launch.py", line 174, in launch
    run(args)
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/torch/distributed/run.py", line 689, in run
    elastic_launch(
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/torch/distributed/launcher/api.py", line 116, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/torch/distributed/launcher/api.py", line 244, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
***************************************
         tools/train.py FAILED         
=======================================
Root Cause:
[0]:
  time: 2023-10-17_23:41:29
  rank: 0 (local_rank: 0)
  exitcode: 1 (pid: 38970)
  error_file: <N/A>
  msg: "Process failed with exitcode 1"
=======================================
Other Failures:
  <NO_OTHER_FAILURES>
***************************************

