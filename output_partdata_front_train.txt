projects.mmdet3d_plugin
2023-10-17 21:02:21,640 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]
CUDA available: True
GPU 0,1: Tesla T4
CUDA_HOME: /usr/local/cuda-11.1
NVCC: Build cuda_11.1.TC455_06.29190527_0
GCC: gcc (GCC) 6.1.0
PyTorch: 1.9.1+cu111
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.10.1+cu111
OpenCV: 4.8.1
MMCV: 1.4.0
MMCV Compiler: GCC 6.1
MMCV CUDA Compiler: 11.1
MMDetection: 2.14.0
MMSegmentation: 0.14.1
MMDetection3D: 0.17.2+fb001bc
------------------------------------------------------------

2023-10-17 21:02:23,057 - mmdet - INFO - Distributed training: True
2023-10-17 21:02:24,447 - mmdet - INFO - Config:
--- <unknown>	(original)
+++ <unknown>	(reformatted)
@@ -1,150 +1,196 @@
-point_cloud_range=[-15.0, -0.0, -2.0, 15.0, 30.0, 2.0]
-class_names=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']
-dataset_type='CustomNuScenesLocalMapDataset'
-data_root='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/'
-input_modality=dict(
+point_cloud_range = [-15.0, -0.0, -2.0, 15.0, 30.0, 2.0]
+class_names = [
+    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
+    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
+]
+dataset_type = 'CustomNuScenesLocalMapDataset'
+data_root = '/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/'
+input_modality = dict(
     use_lidar=True,
     use_camera=True,
     use_radar=False,
     use_map=False,
     use_external=True)
-file_client_args=dict(
-    backend='disk')
-train_pipeline=[
-    dict(type='LoadMultiViewImageFromFiles',
-        to_float32=True),
-    dict(type='CustomLoadPointsFromFile',
+file_client_args = dict(backend='disk')
+train_pipeline = [
+    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
+    dict(
+        type='CustomLoadPointsFromFile',
         coord_type='LIDAR',
         load_dim=5,
         use_dim=5,
         reduce_beams=32),
-    dict(type='CustomLoadPointsFromMultiSweeps',
+    dict(
+        type='CustomLoadPointsFromMultiSweeps',
         sweeps_num=9,
         load_dim=5,
         use_dim=5,
         reduce_beams=32,
         pad_empty_sweeps=True,
         remove_close=True),
-    dict(type='CustomPointsRangeFilter',
+    dict(
+        type='CustomPointsRangeFilter',
         point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]),
     dict(type='PhotoMetricDistortionMultiViewImage'),
-    dict(type='LoadAnnotations3D',
+    dict(
+        type='LoadAnnotations3D',
         with_bbox_3d=True,
         with_label_3d=True,
         with_attr_label=False),
-    dict(type='ObjectRangeFilter',
+    dict(
+        type='ObjectRangeFilter',
         point_cloud_range=[-15.0, -0.0, -2.0, 15.0, 30.0, 2.0]),
-    dict(type='ObjectNameFilter',
-        classes=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']),
-    dict(type='NormalizeMultiviewImage',
+    dict(
+        type='ObjectNameFilter',
+        classes=[
+            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
+        ]),
+    dict(
+        type='NormalizeMultiviewImage',
         mean=[123.675, 116.28, 103.53],
         std=[58.395, 57.12, 57.375],
         to_rgb=True),
-    dict(type='RandomScaleImageMultiViewImage',
-        scales=[0.5]),
-    dict(type='PadMultiViewImage',
-        size_divisor=32),
-    dict(type='DefaultFormatBundle3D',
-        class_names=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']),
-    dict(type='CustomCollect3D',
-        keys=['gt_bboxes_3d', 'gt_labels_3d', 'img', 'points'])]
-test_pipeline=[
-    dict(type='LoadMultiViewImageFromFiles',
-        to_float32=True),
-    dict(type='NormalizeMultiviewImage',
+    dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),
+    dict(type='PadMultiViewImage', size_divisor=32),
+    dict(
+        type='DefaultFormatBundle3D',
+        class_names=[
+            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
+        ]),
+    dict(
+        type='CustomCollect3D',
+        keys=['gt_bboxes_3d', 'gt_labels_3d', 'img', 'points'])
+]
+test_pipeline = [
+    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
+    dict(
+        type='NormalizeMultiviewImage',
         mean=[123.675, 116.28, 103.53],
         std=[58.395, 57.12, 57.375],
         to_rgb=True),
-    dict(type='CustomLoadPointsFromFile',
+    dict(
+        type='CustomLoadPointsFromFile',
         coord_type='LIDAR',
         load_dim=5,
         use_dim=5,
         reduce_beams=32),
-    dict(type='CustomLoadPointsFromMultiSweeps',
+    dict(
+        type='CustomLoadPointsFromMultiSweeps',
         sweeps_num=9,
         load_dim=5,
         use_dim=5,
         reduce_beams=32,
         pad_empty_sweeps=True,
         remove_close=True),
-    dict(type='CustomPointsRangeFilter',
+    dict(
+        type='CustomPointsRangeFilter',
         point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]),
-    dict(type='MultiScaleFlipAug3D',
+    dict(
+        type='MultiScaleFlipAug3D',
         img_scale=(1600, 900),
         pts_scale_ratio=1,
         flip=False,
         transforms=[
-            dict(type='RandomScaleImageMultiViewImage',
-                scales=[0.5]),
-            dict(type='PadMultiViewImage',
-                size_divisor=32),
-            dict(type='DefaultFormatBundle3D',
-                class_names=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'],
+            dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),
+            dict(type='PadMultiViewImage', size_divisor=32),
+            dict(
+                type='DefaultFormatBundle3D',
+                class_names=[
+                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
+                    'traffic_cone'
+                ],
                 with_label=False),
-            dict(type='CustomCollect3D',
-                keys=['img', 'points'])])]
-eval_pipeline=[
-    dict(type='LoadPointsFromFile',
+            dict(type='CustomCollect3D', keys=['img', 'points'])
+        ])
+]
+eval_pipeline = [
+    dict(
+        type='LoadPointsFromFile',
         coord_type='LIDAR',
         load_dim=5,
         use_dim=5,
-        file_client_args=dict(
-            backend='disk')),
-    dict(type='LoadPointsFromMultiSweeps',
+        file_client_args=dict(backend='disk')),
+    dict(
+        type='LoadPointsFromMultiSweeps',
         sweeps_num=10,
-        file_client_args=dict(
-            backend='disk')),
-    dict(type='DefaultFormatBundle3D',
-        class_names=['car', 'truck', 'trailer', 'bus', 'construction_vehicle', 'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'],
+        file_client_args=dict(backend='disk')),
+    dict(
+        type='DefaultFormatBundle3D',
+        class_names=[
+            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
+            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
+        ],
         with_label=False),
-    dict(type='Collect3D',
-        keys=['points'])]
-data=dict(
+    dict(type='Collect3D', keys=['points'])
+]
+data = dict(
     samples_per_gpu=3,
     workers_per_gpu=1,
     train=dict(
         type='CustomNuScenesLocalMapDataset',
         data_root='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/',
-        ann_file='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_infos_temporal_train.pkl',
+        ann_file=
+        '/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_infos_temporal_train.pkl',
         pipeline=[
-            dict(type='LoadMultiViewImageFromFiles',
-                to_float32=True),
-            dict(type='CustomLoadPointsFromFile',
+            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
+            dict(
+                type='CustomLoadPointsFromFile',
                 coord_type='LIDAR',
                 load_dim=5,
                 use_dim=5,
                 reduce_beams=32),
-            dict(type='CustomLoadPointsFromMultiSweeps',
+            dict(
+                type='CustomLoadPointsFromMultiSweeps',
                 sweeps_num=9,
                 load_dim=5,
                 use_dim=5,
                 reduce_beams=32,
                 pad_empty_sweeps=True,
                 remove_close=True),
-            dict(type='CustomPointsRangeFilter',
+            dict(
+                type='CustomPointsRangeFilter',
                 point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]),
             dict(type='PhotoMetricDistortionMultiViewImage'),
-            dict(type='LoadAnnotations3D',
+            dict(
+                type='LoadAnnotations3D',
                 with_bbox_3d=True,
                 with_label_3d=True,
                 with_attr_label=False),
-            dict(type='ObjectRangeFilter',
+            dict(
+                type='ObjectRangeFilter',
                 point_cloud_range=[-15.0, -0.0, -2.0, 15.0, 30.0, 2.0]),
-            dict(type='ObjectNameFilter',
-                classes=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']),
-            dict(type='NormalizeMultiviewImage',
+            dict(
+                type='ObjectNameFilter',
+                classes=[
+                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
+                    'traffic_cone'
+                ]),
+            dict(
+                type='NormalizeMultiviewImage',
                 mean=[123.675, 116.28, 103.53],
                 std=[58.395, 57.12, 57.375],
                 to_rgb=True),
-            dict(type='RandomScaleImageMultiViewImage',
-                scales=[0.5]),
-            dict(type='PadMultiViewImage',
-                size_divisor=32),
-            dict(type='DefaultFormatBundle3D',
-                class_names=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']),
-            dict(type='CustomCollect3D',
-                keys=['gt_bboxes_3d', 'gt_labels_3d', 'img', 'points'])],
-        classes=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'],
+            dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),
+            dict(type='PadMultiViewImage', size_divisor=32),
+            dict(
+                type='DefaultFormatBundle3D',
+                class_names=[
+                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
+                    'traffic_cone'
+                ]),
+            dict(
+                type='CustomCollect3D',
+                keys=['gt_bboxes_3d', 'gt_labels_3d', 'img', 'points'])
+        ],
+        classes=[
+            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
+        ],
         modality=dict(
             use_lidar=True,
             use_camera=True,
@@ -163,43 +209,55 @@
         queue_length=1),
     val=dict(
         type='CustomNuScenesLocalMapDataset',
-        ann_file='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_infos_temporal_val.pkl',
+        ann_file=
+        '/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_infos_temporal_val.pkl',
         pipeline=[
-            dict(type='LoadMultiViewImageFromFiles',
-                to_float32=True),
-            dict(type='NormalizeMultiviewImage',
+            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
+            dict(
+                type='NormalizeMultiviewImage',
                 mean=[123.675, 116.28, 103.53],
                 std=[58.395, 57.12, 57.375],
                 to_rgb=True),
-            dict(type='CustomLoadPointsFromFile',
+            dict(
+                type='CustomLoadPointsFromFile',
                 coord_type='LIDAR',
                 load_dim=5,
                 use_dim=5,
                 reduce_beams=32),
-            dict(type='CustomLoadPointsFromMultiSweeps',
+            dict(
+                type='CustomLoadPointsFromMultiSweeps',
                 sweeps_num=9,
                 load_dim=5,
                 use_dim=5,
                 reduce_beams=32,
                 pad_empty_sweeps=True,
                 remove_close=True),
-            dict(type='CustomPointsRangeFilter',
+            dict(
+                type='CustomPointsRangeFilter',
                 point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]),
-            dict(type='MultiScaleFlipAug3D',
+            dict(
+                type='MultiScaleFlipAug3D',
                 img_scale=(1600, 900),
                 pts_scale_ratio=1,
                 flip=False,
                 transforms=[
-                    dict(type='RandomScaleImageMultiViewImage',
-                        scales=[0.5]),
-                    dict(type='PadMultiViewImage',
-                        size_divisor=32),
-                    dict(type='DefaultFormatBundle3D',
-                        class_names=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'],
+                    dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),
+                    dict(type='PadMultiViewImage', size_divisor=32),
+                    dict(
+                        type='DefaultFormatBundle3D',
+                        class_names=[
+                            'car', 'truck', 'construction_vehicle', 'bus',
+                            'trailer', 'barrier', 'motorcycle', 'bicycle',
+                            'pedestrian', 'traffic_cone'
+                        ],
                         with_label=False),
-                    dict(type='CustomCollect3D',
-                        keys=['img', 'points'])])],
-        classes=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'],
+                    dict(type='CustomCollect3D', keys=['img', 'points'])
+                ])
+        ],
+        classes=[
+            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
+        ],
         modality=dict(
             use_lidar=True,
             use_camera=True,
@@ -209,7 +267,8 @@
         test_mode=True,
         box_type_3d='LiDAR',
         data_root='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/',
-        map_ann_file='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_map_anns_val.json',
+        map_ann_file=
+        '/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_map_anns_val.json',
         bev_size=(200, 100),
         pc_range=[-15.0, -0.0, -2.0, 15.0, 30.0, 2.0],
         fixed_ptsnum_per_line=20,
@@ -220,43 +279,55 @@
     test=dict(
         type='CustomNuScenesLocalMapDataset',
         data_root='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/',
-        ann_file='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_infos_temporal_val.pkl',
+        ann_file=
+        '/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_infos_temporal_val.pkl',
         pipeline=[
-            dict(type='LoadMultiViewImageFromFiles',
-                to_float32=True),
-            dict(type='NormalizeMultiviewImage',
+            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
+            dict(
+                type='NormalizeMultiviewImage',
                 mean=[123.675, 116.28, 103.53],
                 std=[58.395, 57.12, 57.375],
                 to_rgb=True),
-            dict(type='CustomLoadPointsFromFile',
+            dict(
+                type='CustomLoadPointsFromFile',
                 coord_type='LIDAR',
                 load_dim=5,
                 use_dim=5,
                 reduce_beams=32),
-            dict(type='CustomLoadPointsFromMultiSweeps',
+            dict(
+                type='CustomLoadPointsFromMultiSweeps',
                 sweeps_num=9,
                 load_dim=5,
                 use_dim=5,
                 reduce_beams=32,
                 pad_empty_sweeps=True,
                 remove_close=True),
-            dict(type='CustomPointsRangeFilter',
+            dict(
+                type='CustomPointsRangeFilter',
                 point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]),
-            dict(type='MultiScaleFlipAug3D',
+            dict(
+                type='MultiScaleFlipAug3D',
                 img_scale=(1600, 900),
                 pts_scale_ratio=1,
                 flip=False,
                 transforms=[
-                    dict(type='RandomScaleImageMultiViewImage',
-                        scales=[0.5]),
-                    dict(type='PadMultiViewImage',
-                        size_divisor=32),
-                    dict(type='DefaultFormatBundle3D',
-                        class_names=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'],
+                    dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),
+                    dict(type='PadMultiViewImage', size_divisor=32),
+                    dict(
+                        type='DefaultFormatBundle3D',
+                        class_names=[
+                            'car', 'truck', 'construction_vehicle', 'bus',
+                            'trailer', 'barrier', 'motorcycle', 'bicycle',
+                            'pedestrian', 'traffic_cone'
+                        ],
                         with_label=False),
-                    dict(type='CustomCollect3D',
-                        keys=['img', 'points'])])],
-        classes=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'],
+                    dict(type='CustomCollect3D', keys=['img', 'points'])
+                ])
+        ],
+        classes=[
+            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
+            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
+        ],
         modality=dict(
             use_lidar=True,
             use_camera=True,
@@ -265,90 +336,92 @@
             use_external=True),
         test_mode=True,
         box_type_3d='LiDAR',
-        map_ann_file='/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_map_anns_val.json',
+        map_ann_file=
+        '/media/NAS/raw_data/ShuoShen/nuscenes/train/nuscenes/nuscenes_map_anns_val.json',
         bev_size=(200, 100),
         pc_range=[-15.0, -0.0, -2.0, 15.0, 30.0, 2.0],
         fixed_ptsnum_per_line=20,
         eval_use_same_gt_sample_num_flag=True,
         padding_value=-10000,
         map_classes=['divider', 'ped_crossing', 'boundary']),
-    shuffler_sampler=dict(
-        type='DistributedGroupSampler'),
-    nonshuffler_sampler=dict(
-        type='DistributedSampler'))
-evaluation=dict(
+    shuffler_sampler=dict(type='DistributedGroupSampler'),
+    nonshuffler_sampler=dict(type='DistributedSampler'))
+evaluation = dict(
     interval=2,
     pipeline=[
-        dict(type='LoadMultiViewImageFromFiles',
-            to_float32=True),
-        dict(type='NormalizeMultiviewImage',
+        dict(type='LoadMultiViewImageFromFiles', to_float32=True),
+        dict(
+            type='NormalizeMultiviewImage',
             mean=[123.675, 116.28, 103.53],
             std=[58.395, 57.12, 57.375],
             to_rgb=True),
-        dict(type='CustomLoadPointsFromFile',
+        dict(
+            type='CustomLoadPointsFromFile',
             coord_type='LIDAR',
             load_dim=5,
             use_dim=5,
             reduce_beams=32),
-        dict(type='CustomLoadPointsFromMultiSweeps',
+        dict(
+            type='CustomLoadPointsFromMultiSweeps',
             sweeps_num=9,
             load_dim=5,
             use_dim=5,
             reduce_beams=32,
             pad_empty_sweeps=True,
             remove_close=True),
-        dict(type='CustomPointsRangeFilter',
+        dict(
+            type='CustomPointsRangeFilter',
             point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]),
-        dict(type='MultiScaleFlipAug3D',
+        dict(
+            type='MultiScaleFlipAug3D',
             img_scale=(1600, 900),
             pts_scale_ratio=1,
             flip=False,
             transforms=[
-                dict(type='RandomScaleImageMultiViewImage',
-                    scales=[0.5]),
-                dict(type='PadMultiViewImage',
-                    size_divisor=32),
-                dict(type='DefaultFormatBundle3D',
-                    class_names=['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'],
+                dict(type='RandomScaleImageMultiViewImage', scales=[0.5]),
+                dict(type='PadMultiViewImage', size_divisor=32),
+                dict(
+                    type='DefaultFormatBundle3D',
+                    class_names=[
+                        'car', 'truck', 'construction_vehicle', 'bus',
+                        'trailer', 'barrier', 'motorcycle', 'bicycle',
+                        'pedestrian', 'traffic_cone'
+                    ],
                     with_label=False),
-                dict(type='CustomCollect3D',
-                    keys=['img', 'points'])])],
+                dict(type='CustomCollect3D', keys=['img', 'points'])
+            ])
+    ],
     metric='chamfer')
-checkpoint_config=dict(
-    interval=1)
-log_config=dict(
+checkpoint_config = dict(interval=1)
+log_config = dict(
     interval=50,
-    hooks=[
-        dict(type='TextLoggerHook'),
-        dict(type='TensorboardLoggerHook')])
-dist_params=dict(
-    backend='nccl')
-log_level='INFO'
-work_dir='./work_dirs/maptr_tiny_fusion_24e'
-load_from=None
-resume_from=None
-workflow=[('train', 1)]
-plugin=True
-plugin_dir='projects/mmdet3d_plugin/'
-lidar_point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]
-voxel_size=[0.1, 0.1, 0.2]
-img_norm_cfg=dict(
-    mean=[123.675, 116.28, 103.53],
-    std=[58.395, 57.12, 57.375],
-    to_rgb=True)
-map_classes=['divider', 'ped_crossing', 'boundary']
-fixed_ptsnum_per_gt_line=20
-fixed_ptsnum_per_pred_line=20
-eval_use_same_gt_sample_num_flag=True
-num_map_classes=3
-_dim_=256
-_pos_dim_=128
-_ffn_dim_=512
-_num_levels_=1
-bev_h_=200
-bev_w_=100
-queue_length=1
-model=dict(
+    hooks=[dict(type='TextLoggerHook'),
+           dict(type='TensorboardLoggerHook')])
+dist_params = dict(backend='nccl')
+log_level = 'INFO'
+work_dir = './work_dirs/maptr_tiny_fusion_24e'
+load_from = None
+resume_from = None
+workflow = [('train', 1)]
+plugin = True
+plugin_dir = 'projects/mmdet3d_plugin/'
+lidar_point_cloud_range = [-15.0, -0.0, -5.0, 15.0, 30.0, 3.0]
+voxel_size = [0.1, 0.1, 0.2]
+img_norm_cfg = dict(
+    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
+map_classes = ['divider', 'ped_crossing', 'boundary']
+fixed_ptsnum_per_gt_line = 20
+fixed_ptsnum_per_pred_line = 20
+eval_use_same_gt_sample_num_flag = True
+num_map_classes = 3
+_dim_ = 256
+_pos_dim_ = 128
+_ffn_dim_ = 512
+_num_levels_ = 1
+bev_h_ = 200
+bev_w_ = 100
+queue_length = 1
+model = dict(
     type='MapTR',
     use_grid_mask=True,
     video_test_mode=False,
@@ -365,20 +438,18 @@
             sparse_shape=[300, 600, 41],
             output_channels=128,
             order=('conv', 'norm', 'act'),
-            encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128, 128)),
+            encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128),
+                              (128, 128)),
             encoder_paddings=([0, 0, 1], [0, 0, 1], [0, 0, [1, 1, 0]], [0, 0]),
             block_type='basicblock')),
-    pretrained=dict(
-        img='ckpts/resnet50-19c8e357.pth'),
+    pretrained=dict(img='ckpts/resnet50-19c8e357.pth'),
     img_backbone=dict(
         type='ResNet',
         depth=50,
         num_stages=4,
-        out_indices=(3,),
+        out_indices=(3, ),
         frozen_stages=1,
-        norm_cfg=dict(
-            type='BN',
-            requires_grad=False),
+        norm_cfg=dict(type='BN', requires_grad=False),
         norm_eval=True,
         style='pytorch'),
     img_neck=dict(
@@ -416,9 +487,7 @@
             embed_dims=256,
             modality='fusion',
             fuser=dict(
-                type='ConvFuser',
-                in_channels=[256, 256],
-                out_channels=256),
+                type='ConvFuser', in_channels=[256, 256], out_channels=256),
             encoder=dict(
                 type='BEVFormerEncoder',
                 num_layers=1,
@@ -428,10 +497,12 @@
                 transformerlayers=dict(
                     type='BEVFormerLayer',
                     attn_cfgs=[
-                        dict(type='TemporalSelfAttention',
+                        dict(
+                            type='TemporalSelfAttention',
                             embed_dims=256,
                             num_levels=1),
-                        dict(type='GeometrySptialCrossAttention',
+                        dict(
+                            type='GeometrySptialCrossAttention',
                             pc_range=[-15.0, -0.0, -2.0, 15.0, 30.0, 2.0],
                             attention=dict(
                                 type='GeometryKernelAttention',
@@ -440,10 +511,12 @@
                                 dilation=1,
                                 kernel_size=(3, 5),
                                 num_levels=1),
-                            embed_dims=256)],
+                            embed_dims=256)
+                    ],
                     feedforward_channels=512,
                     ffn_dropout=0.1,
-                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm', 'ffn', 'norm'))),
+                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
+                                     'ffn', 'norm'))),
             decoder=dict(
                 type='MapTRDecoder',
                 num_layers=6,
@@ -451,16 +524,20 @@
                 transformerlayers=dict(
                     type='DetrTransformerDecoderLayer',
                     attn_cfgs=[
-                        dict(type='MultiheadAttention',
+                        dict(
+                            type='MultiheadAttention',
                             embed_dims=256,
                             num_heads=8,
                             dropout=0.1),
-                        dict(type='CustomMSDeformableAttention',
+                        dict(
+                            type='CustomMSDeformableAttention',
                             embed_dims=256,
-                            num_levels=1)],
+                            num_levels=1)
+                    ],
                     feedforward_channels=512,
                     ffn_dropout=0.1,
-                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm', 'ffn', 'norm')))),
+                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
+                                     'ffn', 'norm')))),
         bbox_coder=dict(
             type='MapTRNMSFreeCoder',
             post_center_range=[-20, -35, -20, -35, 20, 35, 20, 35],
@@ -479,18 +556,10 @@
             gamma=2.0,
             alpha=0.25,
             loss_weight=2.0),
-        loss_bbox=dict(
-            type='L1Loss',
-            loss_weight=0.0),
-        loss_iou=dict(
-            type='GIoULoss',
-            loss_weight=0.0),
-        loss_pts=dict(
-            type='PtsL1Loss',
-            loss_weight=5.0),
-        loss_dir=dict(
-            type='PtsDirCosLoss',
-            loss_weight=0.005)),
+        loss_bbox=dict(type='L1Loss', loss_weight=0.0),
+        loss_iou=dict(type='GIoULoss', loss_weight=0.0),
+        loss_pts=dict(type='PtsL1Loss', loss_weight=5.0),
+        loss_dir=dict(type='PtsDirCosLoss', loss_weight=0.005)),
     train_cfg=dict(
         pts=dict(
             grid_size=[512, 512, 1],
@@ -499,47 +568,29 @@
             out_size_factor=4,
             assigner=dict(
                 type='MapTRAssigner',
-                cls_cost=dict(
-                    type='FocalLossCost',
-                    weight=2.0),
+                cls_cost=dict(type='FocalLossCost', weight=2.0),
                 reg_cost=dict(
-                    type='BBoxL1Cost',
-                    weight=0.0,
-                    box_format='xywh'),
-                iou_cost=dict(
-                    type='IoUCost',
-                    iou_mode='giou',
-                    weight=0.0),
-                pts_cost=dict(
-                    type='OrderedPtsL1Cost',
-                    weight=5),
+                    type='BBoxL1Cost', weight=0.0, box_format='xywh'),
+                iou_cost=dict(type='IoUCost', iou_mode='giou', weight=0.0),
+                pts_cost=dict(type='OrderedPtsL1Cost', weight=5),
                 pc_range=[-15.0, -0.0, -2.0, 15.0, 30.0, 2.0]))))
-reduce_beams=32
-load_dim=5
-use_dim=5
-optimizer=dict(
+reduce_beams = 32
+load_dim = 5
+use_dim = 5
+optimizer = dict(
     type='AdamW',
     lr=0.0006,
-    paramwise_cfg=dict(
-        custom_keys=dict(
-            img_backbone=dict(
-                lr_mult=0.1))),
+    paramwise_cfg=dict(custom_keys=dict(img_backbone=dict(lr_mult=0.1))),
     weight_decay=0.01)
-optimizer_config=dict(
-    grad_clip=dict(
-        max_norm=35,
-        norm_type=2))
-lr_config=dict(
+optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
+lr_config = dict(
     policy='CosineAnnealing',
     warmup='linear',
     warmup_iters=500,
     warmup_ratio=0.3333333333333333,
     min_lr_ratio=0.001)
-total_epochs=24
-runner=dict(
-    type='EpochBasedRunner',
-    max_epochs=24)
-fp16=dict(
-    loss_scale=512.0)
-find_unused_parameters=True
-gpu_ids=range(0, 1)
+total_epochs = 24
+runner = dict(type='EpochBasedRunner', max_epochs=24)
+fp16 = dict(loss_scale=512.0)
+find_unused_parameters = True
+gpu_ids = range(0, 1)

2023-10-17 21:02:24,447 - mmdet - INFO - Set random seed to 0, deterministic: True
/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/bevformer/modules/custom_base_transformer_layer.py:94: UserWarning: The arguments `feedforward_channels` in BaseTransformerLayer has been deprecated, now you should set `feedforward_channels` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/bevformer/modules/custom_base_transformer_layer.py:94: UserWarning: The arguments `ffn_dropout` in BaseTransformerLayer has been deprecated, now you should set `ffn_drop` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/bevformer/modules/custom_base_transformer_layer.py:94: UserWarning: The arguments `ffn_num_fcs` in BaseTransformerLayer has been deprecated, now you should set `num_fcs` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py:341: UserWarning: The arguments `feedforward_channels` in BaseTransformerLayer has been deprecated, now you should set `feedforward_channels` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py:341: UserWarning: The arguments `ffn_dropout` in BaseTransformerLayer has been deprecated, now you should set `ffn_drop` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py:341: UserWarning: The arguments `ffn_num_fcs` in BaseTransformerLayer has been deprecated, now you should set `num_fcs` and other FFN related arguments to a dict named `ffn_cfgs`. 
  warnings.warn(
/media/NAS/raw_data/ShuoShen/miniconda_home/envs/maptr/lib/python3.8/site-packages/mmcv/cnn/bricks/transformer.py:92: UserWarning: The arguments `dropout` in MultiheadAttention has been deprecated, now you can separately set `attn_drop`(float), proj_drop(float), and `dropout_layer`(dict) 
  warnings.warn('The arguments `dropout` in MultiheadAttention '
/home/ld_t4/Documents/ShuoShen/MapTR/mmdetection3d/mmdet3d/models/detectors/mvx_two_stage.py:87: UserWarning: DeprecationWarning: pretrained is a deprecated                     key, please consider using init_cfg
  warnings.warn('DeprecationWarning: pretrained is a deprecated \
2023-10-17 21:02:24,718 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'ckpts/resnet50-19c8e357.pth'}
2023-10-17 21:02:24,718 - mmcv - INFO - load model from: ckpts/resnet50-19c8e357.pth
2023-10-17 21:02:24,718 - mmcv - INFO - load checkpoint from local path: ckpts/resnet50-19c8e357.pth
2023-10-17 21:02:24,818 - mmcv - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

2023-10-17 21:02:24,824 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2023-10-17 21:02:24,833 - mmdet - INFO - Model:
MapTR(
  (pts_bbox_head): MapTRHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (loss_iou): GIoULoss()
    (activate): ReLU(inplace=True)
    (positional_encoding): LearnedPositionalEncoding(num_feats=128, row_num_embed=200, col_num_embed=100)
    (transformer): MapTRPerceptionTransformer(
      (fuser): ConvFuser(
        (0): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (encoder): BEVFormerEncoder(
        (layers): ModuleList(
          (0): BEVFormerLayer(
            (attentions): ModuleList(
              (0): TemporalSelfAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=512, out_features=128, bias=True)
                (attention_weights): Linear(in_features=512, out_features=64, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
              (1): GeometrySptialCrossAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (attention): GeometryKernelAttention(
                  (attention_weights): Linear(in_features=256, out_features=60, bias=True)
                  (value_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (decoder): MapTRDecoder(
        (layers): ModuleList(
          (0): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): CustomMSDeformableAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
                (attention_weights): Linear(in_features=256, out_features=32, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=512, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=512, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
      (reference_points): Linear(in_features=256, out_features=2, bias=True)
      (can_bus_mlp): Sequential(
        (0): Linear(in_features=18, out_features=128, bias=True)
        (1): ReLU(inplace=True)
        (2): Linear(in_features=128, out_features=256, bias=True)
        (3): ReLU(inplace=True)
        (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (cls_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=3, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=3, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=3, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=3, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=3, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=3, bias=True)
      )
    )
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=2, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=2, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=2, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=2, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=2, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=2, bias=True)
      )
    )
    (bev_embedding): Embedding(20000, 256)
    (instance_embedding): Embedding(50, 512)
    (pts_embedding): Embedding(20, 512)
    (loss_pts): PtsL1Loss()
    (loss_dir): PtsDirCosLoss()
  )
  (img_backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'ckpts/resnet50-19c8e357.pth'}
  (img_neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (grid_mask): GridMask()
  (lidar_modal_extractor): ModuleDict(
    (voxelize): Voxelization(voxel_size=[0.1, 0.1, 0.2], point_cloud_range=[-15.0, -0.0, -5.0, 15.0, 30.0, 3.0], max_num_points=10, max_voxels=(90000, 120000), deterministic=True)
    (backbone): SparseEncoder(
      (conv_input): SparseSequential(
        (0): SubMConv3d()
        (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (encoder_layers): SparseSequential(
        (encoder_layer1): SparseSequential(
          (0): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (1): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): SparseSequential(
            (0): SparseConv3d()
            (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
        (encoder_layer2): SparseSequential(
          (0): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (1): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): SparseSequential(
            (0): SparseConv3d()
            (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
        (encoder_layer3): SparseSequential(
          (0): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (1): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (2): SparseSequential(
            (0): SparseConv3d()
            (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
          )
        )
        (encoder_layer4): SparseSequential(
          (0): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
          (1): SparseBasicBlock(
            (conv1): SubMConv3d()
            (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (conv2): SubMConv3d()
            (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
          )
        )
      )
      (conv_out): SparseSequential(
        (0): SparseConv3d()
        (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
  )
)
2023-10-17 21:02:30,531 - mmdet - INFO - Start running, host: ld_t4@ld-t4, work_dir: /home/ld_t4/Documents/ShuoShen/MapTR/work_dirs/maptr_tiny_fusion_24e
2023-10-17 21:02:30,532 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2023-10-17 21:02:30,532 - mmdet - INFO - workflow: [('train', 1)], max: 24 epochs
2023-10-17 21:02:30,534 - mmdet - INFO - Checkpoints will be saved to /home/ld_t4/Documents/ShuoShen/MapTR/work_dirs/maptr_tiny_fusion_24e by HardDiskBackend.
/home/ld_t4/Documents/ShuoShen/MapTR/./projects/mmdet3d_plugin/models/utils/grid_mask.py:114: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  ../torch/csrc/utils/tensor_numpy.cpp:180.)
  mask = torch.from_numpy(mask).to(x.dtype).cuda()
[W reducer.cpp:1158] Warning: find_unused_parameters=True was specified in DDP constructor, but did not find any unused parameters in the forward pass. This flag results in an extra traversal of the autograd graph every iteration,  which can adversely affect performance. If your model indeed never has any unused parameters in the forward pass, consider turning this flag off. Note that this warning may be a false positive if your model has flow control causing later iterations to have unused parameters. (function operator())
